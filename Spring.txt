Spring IO Platform has 3 layers:
? Foundation layer
? Coordination layer
? Execution layer
----------------------------------------------------------------
DispatcherServlet:In Spring MVC all incoming requests go through a single servlet.
                  The task of the DispatcherServlet is to send request to the specific 
                  Spring MVC controller.
   WebAppInitializer interface: it allows for the creation, configuration, 
                                and registration of the DispatcherServlet programmatically.
   AbstractDispatcherServletInitializer abstract class: Base class for WebApplicationInitializer 
                              implementations that register a DispatcherServlet in the servlet context.
   AbstractAnnotationConfigDispatcherServletInitializer abstract class: we can use the convenience classes 
                             provided by Spring instead of manually configuring the DispatcherServlet 
                             and/or ContextLoaderListener.
ApplicationContext: In spring mvc for every web application applicationContext.xml file used as the root 
                    context configuration. Spring loads this file and creates the 
                    ApplicationContext for whole application.

WebApplicationContext: WebApplicationContext has javax.servlet.ServletContext that means 
                       it’s able to communicate with the container.
                       It is a web aware ApplicationContext i.e it has Servlet Context information.

HandlerMapping: HandlerMapping is an Interface to be implemented by objects that define 
                a mapping between requests and handler objects. 
                By default DispatcherServlet uses BeanNameUrlHandlerMapping and 
                DefaultAnnotationHandlerMapping. 
                In Spring we majorly use the below handler mappings
         1.BeanNameUrlHandlerMapping: Here we will be mapping each request to a Bean directly.
	 2.ControllerClassNameHandlerMapping:ControllerClassNameHandlerMapping uses a convention to map 
                                          the requested URL to the Controller.
	 3.SimpleUrlHandlerMapping: SimpleUrlHandlerMapping is the simplest of all handler mappings which 
                                    allows you specify URL pattern and handler explicity

ViewResolver:
   ViewResolver	                            Description
AbstractCachingViewResolver	An abstract view resolver which takes care of caching views. Often views need preparation before they can be used, extending this view resolver provides caching of views.
XmlViewResolver         	An implementation of ViewResolver that accepts a configuration file written in XML with the same DTD as Spring's XML bean factories. The default configuration file is /WEB-INF/views.xml.
ResourceBundleViewResolver	An implementation of ViewResolver that uses bean definitions in a ResourceBundle, specified by the bundle basename. The bundle is typically defined in a properties file, located in the classpath. The default file name is views.properties.
UrlBasedViewResolver    	A simple implementation of the ViewResolver interface that effects the direct resolution of symbolic view names to URLs, without an explicit mapping definition. This is appropriate if your symbolic names match the names of your view resources in a straightforward manner, without the need for arbitrary mappings.
InternalResourceViewResolver	A convenience subclass of UrlBasedViewResolver that supports InternalResourceView (i.e. Servlets and JSPs), and subclasses such as JstlView and TilesView. The view class for all views generated by this resolver can be specified via setViewClass(..). See the Javadocs for the UrlBasedViewResolver class for details.
VelocityViewResolver / 
FreeMarkerViewResolver	       A convenience subclass of UrlBasedViewResolver that supports VelocityView (i.e. Velocity templates) or FreeMarkerView respectively and custom subclasses of them.